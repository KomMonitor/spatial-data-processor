/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.n52.kommonitor.spatialdataprocessor.api;

import org.n52.kommonitor.models.ProcessOverviewType;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-09-26T22:28:49.656311400+02:00[Europe/Budapest]")
@Validated
@Tag(name = "processes", description = "Processes that can be executed by this processor")
@RequestMapping("${openapi.komMonitorSpatialDataProcessor.base-path:}")
public interface ProcessesApi {

    /**
     * GET /processes : Returns a list of all available Processes
     * Returns a list of all available Processes
     *
     * @return success (status code 200)
     */
    @Operation(
        operationId = "getAllProcessDescriptions",
        summary = "Returns a list of all available Processes",
        tags = { "processes" },
        responses = {
            @ApiResponse(responseCode = "200", description = "success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProcessOverviewType.class))
            })
        },
        security = {
            @SecurityRequirement(name = "kommonitor_auth", scopes={ "access:spatial-data-processor" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/processes",
        produces = { "application/json" }
    )
    ResponseEntity<List<ProcessOverviewType>> getAllProcessDescriptions(
        
    );

}
